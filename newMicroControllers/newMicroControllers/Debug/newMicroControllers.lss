
newMicroControllers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000882  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000102  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000882  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000120  00000000  00000000  000008b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000019ae  00000000  00000000  000009d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000ada  00000000  00000000  0000237f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008fe  00000000  00000000  00002e59  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002e8  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000302  00000000  00000000  00003a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000073a  00000000  00000000  00003d42  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000100  00000000  00000000  0000447c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  00000776  00000776  0000086a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000457c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.setDirection 00000006  00000770  00000770  00000864  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.twi_init 0000000c  0000073e  0000073e  00000832  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_start 00000010  0000072e  0000072e  00000822  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_stop 00000008  00000768  00000768  0000085c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.twi_tx  00000014  0000071a  0000071a  0000080e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.wait    0000001e  00000672  00000672  00000766  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.sendCommand 00000028  0000064a  0000064a  0000073e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.clearMatrixBoard 00000062  00000414  00000414  00000508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.startTWI 00000052  00000476  00000476  0000056a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.display_snake 000000c2  000001de  000001de  000002d2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.setSnakeSpeed 0000000a  0000074a  0000074a  0000083e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.setSnakeLenghtInc 0000000a  00000754  00000754  00000848  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.__vector_9 000000dc  00000102  00000102  000001f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .rodata       00000010  00800128  0000077a  0000086e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .text.gameOverICON 0000006a  00000344  00000344  00000438  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__vector_5 0000001e  00000690  00000690  00000784  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__vector_6 0000001e  000006ae  000006ae  000007a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.__vector_7 0000001e  000006cc  000006cc  000007c0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text.__vector_8 00000018  000006ea  000006ea  000007de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 32 .text.main    0000003c  000004c8  000004c8  000005bc  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 33 .data.snakeSpeed 00000002  00800138  0000078a  0000087e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 34 .bss.snakeLengthInc 00000002  0080013a  0080013a  00000882  2**0
                  ALLOC
 35 .bss.timerCounter 00000002  0080013c  0080013c  00000882  2**0
                  ALLOC
 36 .bss.current_direction 00000001  00800140  00800140  00000882  2**0
                  ALLOC
 37 .text.advanceSnake 000000a4  000002a0  000002a0  00000394  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 38 .text.initSnake 00000038  00000504  00000504  000005f8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 39 .text.getSnake 00000018  00000702  00000702  000007f6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 40 .text.getSnakeLength 0000000a  0000075e  0000075e  00000852  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 41 .text.clearSnake 0000002e  0000056c  0000056c  00000660  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 42 .text.gameOver 00000030  0000053c  0000053c  00000630  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 43 .text.checkSnake 00000066  000003ae  000003ae  000004a2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 44 .text.moveUp  0000002c  0000059a  0000059a  0000068e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 45 .text.moveDown 0000002c  000005c6  000005c6  000006ba  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 46 .text.moveLeft 0000002c  000005f2  000005f2  000006e6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 47 .text.moveRight 0000002c  0000061e  0000061e  00000712  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 48 .data.length  00000002  0080013e  0000078c  00000880  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 49 .bss.snake    00000028  00800100  00800100  00000882  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 55 00 	jmp	0xaa	; 0xaa <__ctors_end>
   4:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
   8:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
   c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  10:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  14:	0c 94 48 03 	jmp	0x690	; 0x690 <__vector_5>
  18:	0c 94 57 03 	jmp	0x6ae	; 0x6ae <__vector_6>
  1c:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_7>
  20:	0c 94 75 03 	jmp	0x6ea	; 0x6ea <__vector_8>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <_etext>
  28:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  2c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  30:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  34:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  38:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  3c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  40:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  44:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  48:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  4c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  50:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  54:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  58:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  5c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  60:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  64:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  68:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  6c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  70:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  74:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  78:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  7c:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  80:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  84:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>
  88:	0c 94 bb 03 	jmp	0x776	; 0x776 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 28       	or	r0, r1
  90:	80 01       	movw	r16, r0
  92:	28 01       	movw	r4, r16
  94:	3a 00       	.word	0x003a	; ????
  96:	07 7a       	andi	r16, 0xA7	; 167
  98:	01 3a       	cpi	r16, 0xA1	; 161
  9a:	01 3e       	cpi	r16, 0xE1	; 225
  9c:	80 01       	movw	r16, r0
  9e:	3e 01       	movw	r6, r28
  a0:	40 00       	.word	0x0040	; ????
  a2:	07 8c       	ldd	r0, Z+31	; 0x1f
  a4:	01 40       	sbci	r16, 0x01	; 1
  a6:	01 41       	sbci	r16, 0x11	; 17
  a8:	80 00       	.word	0x0080	; ????

000000aa <__ctors_end>:
  aa:	11 24       	eor	r1, r1
  ac:	1f be       	out	0x3f, r1	; 63
  ae:	cf ef       	ldi	r28, 0xFF	; 255
  b0:	d0 e1       	ldi	r29, 0x10	; 16
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	cd bf       	out	0x3d, r28	; 61

000000b6 <__do_copy_data>:
  b6:	ec e8       	ldi	r30, 0x8C	; 140
  b8:	f0 e0       	ldi	r31, 0x00	; 0
  ba:	40 e0       	ldi	r20, 0x00	; 0
  bc:	19 c0       	rjmp	.+50     	; 0xf0 <__do_clear_bss+0x8>
  be:	b7 91       	elpm	r27, Z+
  c0:	a7 91       	elpm	r26, Z+
  c2:	37 91       	elpm	r19, Z+
  c4:	27 91       	elpm	r18, Z+
  c6:	07 91       	elpm	r16, Z+
  c8:	07 fd       	sbrc	r16, 7
  ca:	0e c0       	rjmp	.+28     	; 0xe8 <__do_clear_bss>
  cc:	97 91       	elpm	r25, Z+
  ce:	87 91       	elpm	r24, Z+
  d0:	ef 01       	movw	r28, r30
  d2:	f9 2f       	mov	r31, r25
  d4:	e8 2f       	mov	r30, r24
  d6:	0b bf       	out	0x3b, r16	; 59
  d8:	07 90       	elpm	r0, Z+
  da:	0d 92       	st	X+, r0
  dc:	a2 17       	cp	r26, r18
  de:	b3 07       	cpc	r27, r19
  e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x22>
  e2:	fe 01       	movw	r30, r28
  e4:	1b be       	out	0x3b, r1	; 59
  e6:	04 c0       	rjmp	.+8      	; 0xf0 <__do_clear_bss+0x8>

000000e8 <__do_clear_bss>:
  e8:	1d 92       	st	X+, r1
  ea:	a2 17       	cp	r26, r18
  ec:	b3 07       	cpc	r27, r19
  ee:	e1 f7       	brne	.-8      	; 0xe8 <__do_clear_bss>
  f0:	e9 3a       	cpi	r30, 0xA9	; 169
  f2:	f4 07       	cpc	r31, r20
  f4:	21 f7       	brne	.-56     	; 0xbe <__do_copy_data+0x8>
  f6:	0e 94 64 02 	call	0x4c8	; 0x4c8 <main>
  fa:	0c 94 7f 00 	jmp	0xfe	; 0xfe <_exit>

000000fe <_exit>:
  fe:	f8 94       	cli

00000100 <__stop_program>:
 100:	ff cf       	rjmp	.-2      	; 0x100 <__stop_program>

Disassembly of section .text:

00000776 <__bad_interrupt>:
 776:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.setDirection:

00000770 <setDirection>:
#include <avr/interrupt.h>

static snake_direction current_direction = n;

void setDirection(snake_direction dir){
	current_direction = dir;
 770:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <current_direction>
 774:	08 95       	ret

Disassembly of section .text.twi_init:

0000073e <twi_init>:
}

void twi_init(void){
	TWSR = 0;
 73e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 742:	80 e2       	ldi	r24, 0x20	; 32
 744:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 748:	08 95       	ret

Disassembly of section .text.twi_start:

0000072e <twi_start>:
}

void twi_start(void){
	TWCR = (0x80 | 0x20 | 0x04);
 72e:	84 ea       	ldi	r24, 0xA4	; 164
 730:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 734:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 738:	88 23       	and	r24, r24
 73a:	e4 f7       	brge	.-8      	; 0x734 <twi_start+0x6>
}
 73c:	08 95       	ret

Disassembly of section .text.twi_stop:

00000768 <twi_stop>:

void twi_stop(void){
	TWCR = (0x80 | 0x10 | 0x04);
 768:	84 e9       	ldi	r24, 0x94	; 148
 76a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 76e:	08 95       	ret

Disassembly of section .text.twi_tx:

0000071a <twi_tx>:
}

void twi_tx(unsigned char data){
	TWDR = data;
 71a:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 71e:	84 e8       	ldi	r24, 0x84	; 132
 720:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 724:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 728:	88 23       	and	r24, r24
 72a:	e4 f7       	brge	.-8      	; 0x724 <twi_tx+0xa>
}
 72c:	08 95       	ret

Disassembly of section .text.wait:

00000672 <wait>:

void wait( int ms ){
	for (int i=0; i<ms; i++)
 672:	20 e0       	ldi	r18, 0x00	; 0
 674:	30 e0       	ldi	r19, 0x00	; 0
 676:	08 c0       	rjmp	.+16     	; 0x688 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 678:	ef ec       	ldi	r30, 0xCF	; 207
 67a:	f7 e0       	ldi	r31, 0x07	; 7
 67c:	31 97       	sbiw	r30, 0x01	; 1
 67e:	f1 f7       	brne	.-4      	; 0x67c <wait+0xa>
 680:	00 c0       	rjmp	.+0      	; 0x682 <wait+0x10>
 682:	00 00       	nop
 684:	2f 5f       	subi	r18, 0xFF	; 255
 686:	3f 4f       	sbci	r19, 0xFF	; 255
 688:	28 17       	cp	r18, r24
 68a:	39 07       	cpc	r19, r25
 68c:	ac f3       	brlt	.-22     	; 0x678 <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 68e:	08 95       	ret

Disassembly of section .text.sendCommand:

0000064a <sendCommand>:

void sendCommand(int addres, int byte){
 64a:	cf 93       	push	r28
 64c:	df 93       	push	r29
 64e:	d8 2f       	mov	r29, r24
 650:	c6 2f       	mov	r28, r22
		twi_start();
 652:	0e 94 97 03 	call	0x72e	; 0x72e <twi_start>
		twi_tx(0xE0);		// Display I2C addres + R/W bit
 656:	80 ee       	ldi	r24, 0xE0	; 224
 658:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
		twi_tx(addres);	    // rij
 65c:	8d 2f       	mov	r24, r29
 65e:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
		twi_tx(byte);		// kolumn
 662:	8c 2f       	mov	r24, r28
 664:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
		twi_stop();
 668:	0e 94 b4 03 	call	0x768	; 0x768 <twi_stop>
}
 66c:	df 91       	pop	r29
 66e:	cf 91       	pop	r28
 670:	08 95       	ret

Disassembly of section .text.clearMatrixBoard:

00000414 <clearMatrixBoard>:

void clearMatrixBoard(){	
	sendCommand(0x00, 0x00);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
	sendCommand(0x02, 0x00);
 420:	60 e0       	ldi	r22, 0x00	; 0
 422:	70 e0       	ldi	r23, 0x00	; 0
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
	sendCommand(0x04, 0x00);
 42c:	60 e0       	ldi	r22, 0x00	; 0
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	84 e0       	ldi	r24, 0x04	; 4
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
	sendCommand(0x06, 0x00);
 438:	60 e0       	ldi	r22, 0x00	; 0
 43a:	70 e0       	ldi	r23, 0x00	; 0
 43c:	86 e0       	ldi	r24, 0x06	; 6
 43e:	90 e0       	ldi	r25, 0x00	; 0
 440:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
	sendCommand(0x08, 0x00);
 444:	60 e0       	ldi	r22, 0x00	; 0
 446:	70 e0       	ldi	r23, 0x00	; 0
 448:	88 e0       	ldi	r24, 0x08	; 8
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
	sendCommand(0x0A, 0x00);
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	8a e0       	ldi	r24, 0x0A	; 10
 456:	90 e0       	ldi	r25, 0x00	; 0
 458:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
	sendCommand(0x0C, 0x00);
 45c:	60 e0       	ldi	r22, 0x00	; 0
 45e:	70 e0       	ldi	r23, 0x00	; 0
 460:	8c e0       	ldi	r24, 0x0C	; 12
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
	sendCommand(0x0E, 0x00);	
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	8e e0       	ldi	r24, 0x0E	; 14
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
 474:	08 95       	ret

Disassembly of section .text.startTWI:

00000476 <startTWI>:
}

void startTWI(){
	
	twi_start();
 476:	0e 94 97 03 	call	0x72e	; 0x72e <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
 47a:	80 ee       	ldi	r24, 0xE0	; 224
 47c:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
 480:	81 e2       	ldi	r24, 0x21	; 33
 482:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_stop();
 486:	0e 94 b4 03 	call	0x768	; 0x768 <twi_stop>

	twi_start();
 48a:	0e 94 97 03 	call	0x72e	; 0x72e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 48e:	80 ee       	ldi	r24, 0xE0	; 224
 490:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 494:	80 ea       	ldi	r24, 0xA0	; 160
 496:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_stop();
 49a:	0e 94 b4 03 	call	0x768	; 0x768 <twi_stop>

	twi_start();
 49e:	0e 94 97 03 	call	0x72e	; 0x72e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 4a2:	80 ee       	ldi	r24, 0xE0	; 224
 4a4:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 4a8:	83 ee       	ldi	r24, 0xE3	; 227
 4aa:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_stop();
 4ae:	0e 94 b4 03 	call	0x768	; 0x768 <twi_stop>

	twi_start();
 4b2:	0e 94 97 03 	call	0x72e	; 0x72e <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 4b6:	80 ee       	ldi	r24, 0xE0	; 224
 4b8:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 4bc:	81 e8       	ldi	r24, 0x81	; 129
 4be:	0e 94 8d 03 	call	0x71a	; 0x71a <twi_tx>
	twi_stop();
 4c2:	0e 94 b4 03 	call	0x768	; 0x768 <twi_stop>
 4c6:	08 95       	ret

Disassembly of section .text.display_snake:

000001de <display_snake>:
}

void display_snake(){
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	cd b7       	in	r28, 0x3d	; 61
 1e8:	de b7       	in	r29, 0x3e	; 62
 1ea:	60 97       	sbiw	r28, 0x10	; 16
 1ec:	0f b6       	in	r0, 0x3f	; 63
 1ee:	f8 94       	cli
 1f0:	de bf       	out	0x3e, r29	; 62
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	cd bf       	out	0x3d, r28	; 61
	int toSend[8] = {0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00};	
 1f6:	fe 01       	movw	r30, r28
 1f8:	31 96       	adiw	r30, 0x01	; 1
 1fa:	80 e1       	ldi	r24, 0x10	; 16
 1fc:	df 01       	movw	r26, r30
 1fe:	1d 92       	st	X+, r1
 200:	8a 95       	dec	r24
 202:	e9 f7       	brne	.-6      	; 0x1fe <display_snake+0x20>
	
	for (int i = 0; i < getSnakeLength(); i++) {
 204:	00 e0       	ldi	r16, 0x00	; 0
 206:	10 e0       	ldi	r17, 0x00	; 0
 208:	26 c0       	rjmp	.+76     	; 0x256 <display_snake+0x78>
		segment currentSegment = getSnake(i);
 20a:	c8 01       	movw	r24, r16
 20c:	0e 94 81 03 	call	0x702	; 0x702 <getSnake>
		
		int x = currentSegment.pos[X];
		int y = currentSegment.pos[Y];

		if (x == 1) {
 210:	61 30       	cpi	r22, 0x01	; 1
 212:	71 05       	cpc	r23, r1
 214:	59 f0       	breq	.+22     	; 0x22c <display_snake+0x4e>
			x = 0x80;
			} else{
			x = 1<<(x - 2);
 216:	9b 01       	movw	r18, r22
 218:	22 50       	subi	r18, 0x02	; 2
 21a:	31 09       	sbc	r19, r1
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <display_snake+0x48>
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	2a 95       	dec	r18
 228:	e2 f7       	brpl	.-8      	; 0x222 <display_snake+0x44>
 22a:	02 c0       	rjmp	.+4      	; 0x230 <display_snake+0x52>
		
		int x = currentSegment.pos[X];
		int y = currentSegment.pos[Y];

		if (x == 1) {
			x = 0x80;
 22c:	40 e8       	ldi	r20, 0x80	; 128
 22e:	50 e0       	ldi	r21, 0x00	; 0
			} else{
			x = 1<<(x - 2);
		}
		
		toSend[y - 1] |= x;
 230:	fc 01       	movw	r30, r24
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	ee 0f       	add	r30, r30
 236:	ff 1f       	adc	r31, r31
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	8c 0f       	add	r24, r28
 23e:	9d 1f       	adc	r25, r29
 240:	e8 0f       	add	r30, r24
 242:	f9 1f       	adc	r31, r25
 244:	20 81       	ld	r18, Z
 246:	31 81       	ldd	r19, Z+1	; 0x01
 248:	c9 01       	movw	r24, r18
 24a:	84 2b       	or	r24, r20
 24c:	95 2b       	or	r25, r21
 24e:	91 83       	std	Z+1, r25	; 0x01
 250:	80 83       	st	Z, r24
}

void display_snake(){
	int toSend[8] = {0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00, 0X00};	
	
	for (int i = 0; i < getSnakeLength(); i++) {
 252:	0f 5f       	subi	r16, 0xFF	; 255
 254:	1f 4f       	sbci	r17, 0xFF	; 255
 256:	0e 94 af 03 	call	0x75e	; 0x75e <getSnakeLength>
 25a:	08 17       	cp	r16, r24
 25c:	19 07       	cpc	r17, r25
 25e:	ac f2       	brlt	.-86     	; 0x20a <display_snake+0x2c>
 260:	00 e0       	ldi	r16, 0x00	; 0
 262:	10 e0       	ldi	r17, 0x00	; 0
 264:	0f c0       	rjmp	.+30     	; 0x284 <display_snake+0xa6>
		toSend[y - 1] |= x;
	}	
	
	for (int i = 0; i < 8; i++)
	{
		sendCommand(2 * i, toSend[i]);
 266:	c8 01       	movw	r24, r16
 268:	88 0f       	add	r24, r24
 26a:	99 1f       	adc	r25, r25
 26c:	e1 e0       	ldi	r30, 0x01	; 1
 26e:	f0 e0       	ldi	r31, 0x00	; 0
 270:	ec 0f       	add	r30, r28
 272:	fd 1f       	adc	r31, r29
 274:	e8 0f       	add	r30, r24
 276:	f9 1f       	adc	r31, r25
 278:	60 81       	ld	r22, Z
 27a:	71 81       	ldd	r23, Z+1	; 0x01
 27c:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
		}
		
		toSend[y - 1] |= x;
	}	
	
	for (int i = 0; i < 8; i++)
 280:	0f 5f       	subi	r16, 0xFF	; 255
 282:	1f 4f       	sbci	r17, 0xFF	; 255
 284:	08 30       	cpi	r16, 0x08	; 8
 286:	11 05       	cpc	r17, r1
 288:	74 f3       	brlt	.-36     	; 0x266 <display_snake+0x88>
	{
		sendCommand(2 * i, toSend[i]);
	}
	
}
 28a:	60 96       	adiw	r28, 0x10	; 16
 28c:	0f b6       	in	r0, 0x3f	; 63
 28e:	f8 94       	cli
 290:	de bf       	out	0x3e, r29	; 62
 292:	0f be       	out	0x3f, r0	; 63
 294:	cd bf       	out	0x3d, r28	; 61
 296:	df 91       	pop	r29
 298:	cf 91       	pop	r28
 29a:	1f 91       	pop	r17
 29c:	0f 91       	pop	r16
 29e:	08 95       	ret

Disassembly of section .text.setSnakeSpeed:

0000074a <setSnakeSpeed>:
static int timerCounter = 0;
static int snakeLengthInc = 0;
static int snakeSpeed = 25;

void setSnakeSpeed(int speed){
	snakeSpeed = speed;
 74a:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <snakeSpeed+0x1>
 74e:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <snakeSpeed>
 752:	08 95       	ret

Disassembly of section .text.setSnakeLenghtInc:

00000754 <setSnakeLenghtInc>:
}


void setSnakeLenghtInc(int snakelengt){
	snakeLengthInc = snakelengt;
 754:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <snakeLengthInc+0x1>
 758:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <snakeLengthInc>
 75c:	08 95       	ret

Disassembly of section .text.__vector_9:

00000102 <__vector_9>:
}

ISR(TIMER2_COMP_vect){
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	0b b6       	in	r0, 0x3b	; 59
 10e:	0f 92       	push	r0
 110:	2f 93       	push	r18
 112:	3f 93       	push	r19
 114:	4f 93       	push	r20
 116:	5f 93       	push	r21
 118:	6f 93       	push	r22
 11a:	7f 93       	push	r23
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
 120:	af 93       	push	r26
 122:	bf 93       	push	r27
 124:	ef 93       	push	r30
 126:	ff 93       	push	r31
	timerCounter++;
 128:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <timerCounter>
 12c:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <timerCounter+0x1>
 130:	01 96       	adiw	r24, 0x01	; 1
 132:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <timerCounter+0x1>
 136:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <timerCounter>
	if (timerCounter > snakeSpeed) {
 13a:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <snakeSpeed>
 13e:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <snakeSpeed+0x1>
 142:	28 17       	cp	r18, r24
 144:	39 07       	cpc	r19, r25
 146:	c4 f5       	brge	.+112    	; 0x1b8 <__vector_9+0xb6>
	
		type movement = MOVE;
		if (snakeLengthInc > 4)
 148:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <snakeLengthInc>
 14c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <snakeLengthInc+0x1>
 150:	05 97       	sbiw	r24, 0x05	; 5
 152:	7c f0       	brlt	.+30     	; 0x172 <__vector_9+0x70>
		{
			if (snakeSpeed > 13)
 154:	2e 30       	cpi	r18, 0x0E	; 14
 156:	31 05       	cpc	r19, r1
 158:	34 f0       	brlt	.+12     	; 0x166 <__vector_9+0x64>
			{
				snakeSpeed -= 2;
 15a:	22 50       	subi	r18, 0x02	; 2
 15c:	31 09       	sbc	r19, r1
 15e:	30 93 39 01 	sts	0x0139, r19	; 0x800139 <snakeSpeed+0x1>
 162:	20 93 38 01 	sts	0x0138, r18	; 0x800138 <snakeSpeed>
			}
			
			movement = ADD;
			snakeLengthInc = 0;
 166:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <snakeLengthInc+0x1>
 16a:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <snakeLengthInc>
			if (snakeSpeed > 13)
			{
				snakeSpeed -= 2;
			}
			
			movement = ADD;
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	01 c0       	rjmp	.+2      	; 0x174 <__vector_9+0x72>

ISR(TIMER2_COMP_vect){
	timerCounter++;
	if (timerCounter > snakeSpeed) {
	
		type movement = MOVE;
 172:	80 e0       	ldi	r24, 0x00	; 0
			
			movement = ADD;
			snakeLengthInc = 0;
		}

		switch(current_direction){
 174:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <current_direction>
 178:	91 30       	cpi	r25, 0x01	; 1
 17a:	49 f0       	breq	.+18     	; 0x18e <__vector_9+0x8c>
 17c:	28 f0       	brcs	.+10     	; 0x188 <__vector_9+0x86>
 17e:	92 30       	cpi	r25, 0x02	; 2
 180:	49 f0       	breq	.+18     	; 0x194 <__vector_9+0x92>
 182:	93 30       	cpi	r25, 0x03	; 3
 184:	51 f0       	breq	.+20     	; 0x19a <__vector_9+0x98>
 186:	0b c0       	rjmp	.+22     	; 0x19e <__vector_9+0x9c>
			case(n):
				moveUp(movement);		
 188:	0e 94 cd 02 	call	0x59a	; 0x59a <moveUp>
			break;
 18c:	08 c0       	rjmp	.+16     	; 0x19e <__vector_9+0x9c>
				
			case(o):
			moveRight(movement);		
 18e:	0e 94 0f 03 	call	0x61e	; 0x61e <moveRight>
			break;
 192:	05 c0       	rjmp	.+10     	; 0x19e <__vector_9+0x9c>
		
			case(z):
			moveDown(movement);		
 194:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <moveDown>
			break;
 198:	02 c0       	rjmp	.+4      	; 0x19e <__vector_9+0x9c>
		
			case(w):
			moveLeft(movement);		
 19a:	0e 94 f9 02 	call	0x5f2	; 0x5f2 <moveLeft>
			break;
		}		
			
	
		snakeLengthInc++;
 19e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <snakeLengthInc>
 1a2:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <snakeLengthInc+0x1>
 1a6:	01 96       	adiw	r24, 0x01	; 1
 1a8:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <snakeLengthInc+0x1>
 1ac:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <snakeLengthInc>
		timerCounter = 0;
 1b0:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <timerCounter+0x1>
 1b4:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <timerCounter>
	}	
		
}
 1b8:	ff 91       	pop	r31
 1ba:	ef 91       	pop	r30
 1bc:	bf 91       	pop	r27
 1be:	af 91       	pop	r26
 1c0:	9f 91       	pop	r25
 1c2:	8f 91       	pop	r24
 1c4:	7f 91       	pop	r23
 1c6:	6f 91       	pop	r22
 1c8:	5f 91       	pop	r21
 1ca:	4f 91       	pop	r20
 1cc:	3f 91       	pop	r19
 1ce:	2f 91       	pop	r18
 1d0:	0f 90       	pop	r0
 1d2:	0b be       	out	0x3b, r0	; 59
 1d4:	0f 90       	pop	r0
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	0f 90       	pop	r0
 1da:	1f 90       	pop	r1
 1dc:	18 95       	reti

Disassembly of section .text.gameOverICON:

00000344 <gameOverICON>:

void gameOverICON(){
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	cf 93       	push	r28
 34a:	df 93       	push	r29
 34c:	cd b7       	in	r28, 0x3d	; 61
 34e:	de b7       	in	r29, 0x3e	; 62
 350:	60 97       	sbiw	r28, 0x10	; 16
 352:	0f b6       	in	r0, 0x3f	; 63
 354:	f8 94       	cli
 356:	de bf       	out	0x3e, r29	; 62
 358:	0f be       	out	0x3f, r0	; 63
 35a:	cd bf       	out	0x3d, r28	; 61
	int cross[8] = {0XC0, 0X21, 0X12, 0X0C, 0X0C, 0X12, 0X21, 0XC0};		
 35c:	80 e1       	ldi	r24, 0x10	; 16
 35e:	e8 e2       	ldi	r30, 0x28	; 40
 360:	f1 e0       	ldi	r31, 0x01	; 1
 362:	de 01       	movw	r26, r28
 364:	11 96       	adiw	r26, 0x01	; 1
 366:	01 90       	ld	r0, Z+
 368:	0d 92       	st	X+, r0
 36a:	8a 95       	dec	r24
 36c:	e1 f7       	brne	.-8      	; 0x366 <gameOverICON+0x22>
	for (int i = 0; i < 8; i++)
 36e:	00 e0       	ldi	r16, 0x00	; 0
 370:	10 e0       	ldi	r17, 0x00	; 0
 372:	0f c0       	rjmp	.+30     	; 0x392 <gameOverICON+0x4e>
	{
		sendCommand(2 * i, cross[i]);
 374:	c8 01       	movw	r24, r16
 376:	88 0f       	add	r24, r24
 378:	99 1f       	adc	r25, r25
 37a:	e1 e0       	ldi	r30, 0x01	; 1
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	ec 0f       	add	r30, r28
 380:	fd 1f       	adc	r31, r29
 382:	e8 0f       	add	r30, r24
 384:	f9 1f       	adc	r31, r25
 386:	60 81       	ld	r22, Z
 388:	71 81       	ldd	r23, Z+1	; 0x01
 38a:	0e 94 25 03 	call	0x64a	; 0x64a <sendCommand>
		
}

void gameOverICON(){
	int cross[8] = {0XC0, 0X21, 0X12, 0X0C, 0X0C, 0X12, 0X21, 0XC0};		
	for (int i = 0; i < 8; i++)
 38e:	0f 5f       	subi	r16, 0xFF	; 255
 390:	1f 4f       	sbci	r17, 0xFF	; 255
 392:	08 30       	cpi	r16, 0x08	; 8
 394:	11 05       	cpc	r17, r1
 396:	74 f3       	brlt	.-36     	; 0x374 <gameOverICON+0x30>
	{
		sendCommand(2 * i, cross[i]);
	}
	
	
}
 398:	60 96       	adiw	r28, 0x10	; 16
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	f8 94       	cli
 39e:	de bf       	out	0x3e, r29	; 62
 3a0:	0f be       	out	0x3f, r0	; 63
 3a2:	cd bf       	out	0x3d, r28	; 61
 3a4:	df 91       	pop	r29
 3a6:	cf 91       	pop	r28
 3a8:	1f 91       	pop	r17
 3aa:	0f 91       	pop	r16
 3ac:	08 95       	ret

Disassembly of section .text.__vector_5:

00000690 <__vector_5>:

ISR(INT4_vect){
 690:	1f 92       	push	r1
 692:	0f 92       	push	r0
 694:	0f b6       	in	r0, 0x3f	; 63
 696:	0f 92       	push	r0
 698:	11 24       	eor	r1, r1
 69a:	8f 93       	push	r24
	current_direction = w;
 69c:	83 e0       	ldi	r24, 0x03	; 3
 69e:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <current_direction>
	//sendCommand(8, 0x80);
}
 6a2:	8f 91       	pop	r24
 6a4:	0f 90       	pop	r0
 6a6:	0f be       	out	0x3f, r0	; 63
 6a8:	0f 90       	pop	r0
 6aa:	1f 90       	pop	r1
 6ac:	18 95       	reti

Disassembly of section .text.__vector_6:

000006ae <__vector_6>:

ISR(INT5_vect){
 6ae:	1f 92       	push	r1
 6b0:	0f 92       	push	r0
 6b2:	0f b6       	in	r0, 0x3f	; 63
 6b4:	0f 92       	push	r0
 6b6:	11 24       	eor	r1, r1
 6b8:	8f 93       	push	r24
	current_direction = z;
 6ba:	82 e0       	ldi	r24, 0x02	; 2
 6bc:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <current_direction>
	//sendCommand(6, 0x80);
}
 6c0:	8f 91       	pop	r24
 6c2:	0f 90       	pop	r0
 6c4:	0f be       	out	0x3f, r0	; 63
 6c6:	0f 90       	pop	r0
 6c8:	1f 90       	pop	r1
 6ca:	18 95       	reti

Disassembly of section .text.__vector_7:

000006cc <__vector_7>:

ISR(INT6_vect){
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	8f 93       	push	r24
	current_direction = o;
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <current_direction>
	//sendCommand(4, 0x80);
}
 6de:	8f 91       	pop	r24
 6e0:	0f 90       	pop	r0
 6e2:	0f be       	out	0x3f, r0	; 63
 6e4:	0f 90       	pop	r0
 6e6:	1f 90       	pop	r1
 6e8:	18 95       	reti

Disassembly of section .text.__vector_8:

000006ea <__vector_8>:

ISR(INT7_vect){
 6ea:	1f 92       	push	r1
 6ec:	0f 92       	push	r0
 6ee:	0f b6       	in	r0, 0x3f	; 63
 6f0:	0f 92       	push	r0
 6f2:	11 24       	eor	r1, r1
	current_direction = n;
 6f4:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <current_direction>
	//sendCommand(2, 0x80);
}
 6f8:	0f 90       	pop	r0
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	0f 90       	pop	r0
 6fe:	1f 90       	pop	r1
 700:	18 95       	reti

Disassembly of section .text.main:

000004c8 <main>:

int main( void ){
	EICRB = 0b11111111; 
 4c8:	8f ef       	ldi	r24, 0xFF	; 255
 4ca:	8a bf       	out	0x3a, r24	; 58
	OCR2 = 255;
 4cc:	83 bd       	out	0x23, r24	; 35
	EIMSK = 0b11110000; 
 4ce:	80 ef       	ldi	r24, 0xF0	; 240
 4d0:	89 bf       	out	0x39, r24	; 57
	TIMSK = 0b10000000;
 4d2:	80 e8       	ldi	r24, 0x80	; 128
 4d4:	87 bf       	out	0x37, r24	; 55
	
	sei();
 4d6:	78 94       	sei

	TCCR2 = 0b00011101;
 4d8:	8d e1       	ldi	r24, 0x1D	; 29
 4da:	85 bd       	out	0x25, r24	; 37

	DDRE = 0b00000000;
 4dc:	12 b8       	out	0x02, r1	; 2
	
	twi_init();		// Init TWI interface
 4de:	0e 94 9f 03 	call	0x73e	; 0x73e <twi_init>
	startTWI();
 4e2:	0e 94 3b 02 	call	0x476	; 0x476 <startTWI>
	
	initSnake();
 4e6:	0e 94 82 02 	call	0x504	; 0x504 <initSnake>
	clearMatrixBoard();		
 4ea:	0e 94 0a 02 	call	0x414	; 0x414 <clearMatrixBoard>
	
	wait(500);
 4ee:	84 ef       	ldi	r24, 0xF4	; 244
 4f0:	91 e0       	ldi	r25, 0x01	; 1
 4f2:	0e 94 39 03 	call	0x672	; 0x672 <wait>

	while(1){
		display_snake();
 4f6:	0e 94 ef 00 	call	0x1de	; 0x1de <display_snake>
		wait(500);
 4fa:	84 ef       	ldi	r24, 0xF4	; 244
 4fc:	91 e0       	ldi	r25, 0x01	; 1
 4fe:	0e 94 39 03 	call	0x672	; 0x672 <wait>
 502:	f9 cf       	rjmp	.-14     	; 0x4f6 <main+0x2e>

Disassembly of section .text.advanceSnake:

000002a0 <advanceSnake>:
	initSnake();
}


static void advanceSnake(type movementType)
{
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
	if(length == 10) movementType = MOVE;	
 2a4:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <length>
 2a8:	70 91 3f 01 	lds	r23, 0x013F	; 0x80013f <length+0x1>
 2ac:	6a 30       	cpi	r22, 0x0A	; 10
 2ae:	71 05       	cpc	r23, r1
 2b0:	09 f4       	brne	.+2      	; 0x2b4 <advanceSnake+0x14>
 2b2:	80 e0       	ldi	r24, 0x00	; 0
	
    for(int i = 1; i < MAX; i++)
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	50 e0       	ldi	r21, 0x00	; 0
 2b8:	24 c0       	rjmp	.+72     	; 0x302 <advanceSnake+0x62>
    {
		if(MAX - i <= length + 1 ){
 2ba:	2a e0       	ldi	r18, 0x0A	; 10
 2bc:	30 e0       	ldi	r19, 0x00	; 0
 2be:	24 1b       	sub	r18, r20
 2c0:	35 0b       	sbc	r19, r21
 2c2:	fb 01       	movw	r30, r22
 2c4:	31 96       	adiw	r30, 0x01	; 1
 2c6:	e2 17       	cp	r30, r18
 2c8:	f3 07       	cpc	r31, r19
 2ca:	cc f0       	brlt	.+50     	; 0x2fe <advanceSnake+0x5e>
			snake[MAX - i] = snake[MAX - i - 1];
 2cc:	a9 e0       	ldi	r26, 0x09	; 9
 2ce:	b0 e0       	ldi	r27, 0x00	; 0
 2d0:	a4 1b       	sub	r26, r20
 2d2:	b5 0b       	sbc	r27, r21
 2d4:	22 0f       	add	r18, r18
 2d6:	33 1f       	adc	r19, r19
 2d8:	22 0f       	add	r18, r18
 2da:	33 1f       	adc	r19, r19
 2dc:	f9 01       	movw	r30, r18
 2de:	e0 50       	subi	r30, 0x00	; 0
 2e0:	ff 4f       	sbci	r31, 0xFF	; 255
 2e2:	aa 0f       	add	r26, r26
 2e4:	bb 1f       	adc	r27, r27
 2e6:	aa 0f       	add	r26, r26
 2e8:	bb 1f       	adc	r27, r27
 2ea:	a0 50       	subi	r26, 0x00	; 0
 2ec:	bf 4f       	sbci	r27, 0xFF	; 255
 2ee:	0d 91       	ld	r16, X+
 2f0:	1d 91       	ld	r17, X+
 2f2:	2d 91       	ld	r18, X+
 2f4:	3c 91       	ld	r19, X
 2f6:	00 83       	st	Z, r16
 2f8:	11 83       	std	Z+1, r17	; 0x01
 2fa:	22 83       	std	Z+2, r18	; 0x02
 2fc:	33 83       	std	Z+3, r19	; 0x03

static void advanceSnake(type movementType)
{
	if(length == 10) movementType = MOVE;	
	
    for(int i = 1; i < MAX; i++)
 2fe:	4f 5f       	subi	r20, 0xFF	; 255
 300:	5f 4f       	sbci	r21, 0xFF	; 255
 302:	4a 30       	cpi	r20, 0x0A	; 10
 304:	51 05       	cpc	r21, r1
 306:	cc f2       	brlt	.-78     	; 0x2ba <advanceSnake+0x1a>
		if(MAX - i <= length + 1 ){
			snake[MAX - i] = snake[MAX - i - 1];
		}
    }
	
    if (movementType == MOVE)
 308:	81 11       	cpse	r24, r1
 30a:	10 c0       	rjmp	.+32     	; 0x32c <advanceSnake+0x8c>
    {
        segment seg = {.pos = {NULL, NULL}};
        if (length < MAX) snake[length+1] = seg;
 30c:	6a 30       	cpi	r22, 0x0A	; 10
 30e:	71 05       	cpc	r23, r1
 310:	b4 f4       	brge	.+44     	; 0x33e <advanceSnake+0x9e>
 312:	fb 01       	movw	r30, r22
 314:	31 96       	adiw	r30, 0x01	; 1
 316:	ee 0f       	add	r30, r30
 318:	ff 1f       	adc	r31, r31
 31a:	ee 0f       	add	r30, r30
 31c:	ff 1f       	adc	r31, r31
 31e:	e0 50       	subi	r30, 0x00	; 0
 320:	ff 4f       	sbci	r31, 0xFF	; 255
 322:	10 82       	st	Z, r1
 324:	11 82       	std	Z+1, r1	; 0x01
 326:	12 82       	std	Z+2, r1	; 0x02
 328:	13 82       	std	Z+3, r1	; 0x03
 32a:	09 c0       	rjmp	.+18     	; 0x33e <advanceSnake+0x9e>
    } else
    {
        if (length < MAX) length++;
 32c:	6a 30       	cpi	r22, 0x0A	; 10
 32e:	71 05       	cpc	r23, r1
 330:	34 f4       	brge	.+12     	; 0x33e <advanceSnake+0x9e>
 332:	6f 5f       	subi	r22, 0xFF	; 255
 334:	7f 4f       	sbci	r23, 0xFF	; 255
 336:	70 93 3f 01 	sts	0x013F, r23	; 0x80013f <length+0x1>
 33a:	60 93 3e 01 	sts	0x013E, r22	; 0x80013e <length>
    }
}
 33e:	1f 91       	pop	r17
 340:	0f 91       	pop	r16
 342:	08 95       	ret

Disassembly of section .text.initSnake:

00000504 <initSnake>:
static segment snake[MAX] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
static int length = 3;

void initSnake()
{
    for(int i = 0; i < length; i++)
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	11 c0       	rjmp	.+34     	; 0x52c <initSnake+0x28>
    {
        segment seg = {.pos = {3 + i, 6}};
 50a:	ac 01       	movw	r20, r24
 50c:	4d 5f       	subi	r20, 0xFD	; 253
 50e:	5f 4f       	sbci	r21, 0xFF	; 255
 510:	66 e0       	ldi	r22, 0x06	; 6
 512:	70 e0       	ldi	r23, 0x00	; 0
        snake[i] = seg;
 514:	fc 01       	movw	r30, r24
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	ee 0f       	add	r30, r30
 51c:	ff 1f       	adc	r31, r31
 51e:	e0 50       	subi	r30, 0x00	; 0
 520:	ff 4f       	sbci	r31, 0xFF	; 255
 522:	40 83       	st	Z, r20
 524:	51 83       	std	Z+1, r21	; 0x01
 526:	62 83       	std	Z+2, r22	; 0x02
 528:	73 83       	std	Z+3, r23	; 0x03
static segment snake[MAX] = {NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL};
static int length = 3;

void initSnake()
{
    for(int i = 0; i < length; i++)
 52a:	01 96       	adiw	r24, 0x01	; 1
 52c:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <length>
 530:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <length+0x1>
 534:	82 17       	cp	r24, r18
 536:	93 07       	cpc	r25, r19
 538:	44 f3       	brlt	.-48     	; 0x50a <initSnake+0x6>
    {
        segment seg = {.pos = {3 + i, 6}};
        snake[i] = seg;
    }
}
 53a:	08 95       	ret

Disassembly of section .text.getSnake:

00000702 <getSnake>:

segment getSnake(int index){
	return snake[index];
 702:	88 0f       	add	r24, r24
 704:	99 1f       	adc	r25, r25
 706:	88 0f       	add	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	fc 01       	movw	r30, r24
 70c:	e0 50       	subi	r30, 0x00	; 0
 70e:	ff 4f       	sbci	r31, 0xFF	; 255
 710:	60 81       	ld	r22, Z
 712:	71 81       	ldd	r23, Z+1	; 0x01
 714:	82 81       	ldd	r24, Z+2	; 0x02
 716:	93 81       	ldd	r25, Z+3	; 0x03
}
 718:	08 95       	ret

Disassembly of section .text.getSnakeLength:

0000075e <getSnakeLength>:

int getSnakeLength(){
	return length;
}
 75e:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <length>
 762:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <length+0x1>
 766:	08 95       	ret

Disassembly of section .text.clearSnake:

0000056c <clearSnake>:
        checkSnake();
    }
}

void clearSnake(){
	for(int i = 0; i < 10; i++){
 56c:	80 e0       	ldi	r24, 0x00	; 0
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	10 c0       	rjmp	.+32     	; 0x592 <clearSnake+0x26>
		segment seg = {.pos = {NULL, NULL}};				
 572:	40 e0       	ldi	r20, 0x00	; 0
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	60 e0       	ldi	r22, 0x00	; 0
 578:	70 e0       	ldi	r23, 0x00	; 0
			
		snake[i] = seg;
 57a:	fc 01       	movw	r30, r24
 57c:	ee 0f       	add	r30, r30
 57e:	ff 1f       	adc	r31, r31
 580:	ee 0f       	add	r30, r30
 582:	ff 1f       	adc	r31, r31
 584:	e0 50       	subi	r30, 0x00	; 0
 586:	ff 4f       	sbci	r31, 0xFF	; 255
 588:	40 83       	st	Z, r20
 58a:	51 83       	std	Z+1, r21	; 0x01
 58c:	62 83       	std	Z+2, r22	; 0x02
 58e:	73 83       	std	Z+3, r23	; 0x03
        checkSnake();
    }
}

void clearSnake(){
	for(int i = 0; i < 10; i++){
 590:	01 96       	adiw	r24, 0x01	; 1
 592:	8a 30       	cpi	r24, 0x0A	; 10
 594:	91 05       	cpc	r25, r1
 596:	6c f3       	brlt	.-38     	; 0x572 <clearSnake+0x6>
		segment seg = {.pos = {NULL, NULL}};				
			
		snake[i] = seg;
	}
}
 598:	08 95       	ret

Disassembly of section .text.gameOver:

0000053c <gameOver>:

void gameOver()
{
	length = 3;
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <length+0x1>
 544:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <length>
	gameOverICON();
 548:	0e 94 a2 01 	call	0x344	; 0x344 <gameOverICON>
	clearSnake();
 54c:	0e 94 b6 02 	call	0x56c	; 0x56c <clearSnake>
	setSnakeLenghtInc(0);
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	0e 94 aa 03 	call	0x754	; 0x754 <setSnakeLenghtInc>
	setDirection(n);
 558:	80 e0       	ldi	r24, 0x00	; 0
 55a:	0e 94 b8 03 	call	0x770	; 0x770 <setDirection>
	setSnakeSpeed(25);
 55e:	89 e1       	ldi	r24, 0x19	; 25
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 a5 03 	call	0x74a	; 0x74a <setSnakeSpeed>
	initSnake();
 566:	0e 94 82 02 	call	0x504	; 0x504 <initSnake>
 56a:	08 95       	ret

Disassembly of section .text.checkSnake:

000003ae <checkSnake>:
        if (length < MAX) length++;
    }
}

static void checkSnake()
{
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
    for(int i = 1; i < length - 1; i++)
 3b2:	c1 e0       	ldi	r28, 0x01	; 1
 3b4:	d0 e0       	ldi	r29, 0x00	; 0
 3b6:	23 c0       	rjmp	.+70     	; 0x3fe <checkSnake+0x50>
    {
        if (snake[i].pos[X] == snake[0].pos[X] && snake[i].pos[Y] == snake[0].pos[Y])
 3b8:	fe 01       	movw	r30, r28
 3ba:	ee 0f       	add	r30, r30
 3bc:	ff 1f       	adc	r31, r31
 3be:	ee 0f       	add	r30, r30
 3c0:	ff 1f       	adc	r31, r31
 3c2:	e0 50       	subi	r30, 0x00	; 0
 3c4:	ff 4f       	sbci	r31, 0xFF	; 255
 3c6:	20 81       	ld	r18, Z
 3c8:	31 81       	ldd	r19, Z+1	; 0x01
 3ca:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 3ce:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 3d2:	28 17       	cp	r18, r24
 3d4:	39 07       	cpc	r19, r25
 3d6:	91 f4       	brne	.+36     	; 0x3fc <checkSnake+0x4e>
 3d8:	fe 01       	movw	r30, r28
 3da:	ee 0f       	add	r30, r30
 3dc:	ff 1f       	adc	r31, r31
 3de:	ee 0f       	add	r30, r30
 3e0:	ff 1f       	adc	r31, r31
 3e2:	e0 50       	subi	r30, 0x00	; 0
 3e4:	ff 4f       	sbci	r31, 0xFF	; 255
 3e6:	22 81       	ldd	r18, Z+2	; 0x02
 3e8:	33 81       	ldd	r19, Z+3	; 0x03
 3ea:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 3ee:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 3f2:	28 17       	cp	r18, r24
 3f4:	39 07       	cpc	r19, r25
 3f6:	11 f4       	brne	.+4      	; 0x3fc <checkSnake+0x4e>
        {
            gameOver();
 3f8:	0e 94 9e 02 	call	0x53c	; 0x53c <gameOver>
    }
}

static void checkSnake()
{
    for(int i = 1; i < length - 1; i++)
 3fc:	21 96       	adiw	r28, 0x01	; 1
 3fe:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <length>
 402:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <length+0x1>
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	c8 17       	cp	r28, r24
 40a:	d9 07       	cpc	r29, r25
 40c:	ac f2       	brlt	.-86     	; 0x3b8 <checkSnake+0xa>
        if (snake[i].pos[X] == snake[0].pos[X] && snake[i].pos[Y] == snake[0].pos[Y])
        {
            gameOver();
        }
    }
}
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	08 95       	ret

Disassembly of section .text.moveUp:

0000059a <moveUp>:
int getSnakeLength(){
	return length;
}
void moveUp(type movementType)
{
    if (snake[0].pos[Y] == 1)
 59a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 59e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5a2:	21 30       	cpi	r18, 0x01	; 1
 5a4:	31 05       	cpc	r19, r1
 5a6:	19 f4       	brne	.+6      	; 0x5ae <moveUp+0x14>
    {
        gameOver();
 5a8:	0e 94 9e 02 	call	0x53c	; 0x53c <gameOver>
 5ac:	08 95       	ret
    } else
    {
		
        advanceSnake(movementType);
 5ae:	0e 94 50 01 	call	0x2a0	; 0x2a0 <advanceSnake>
        snake[0].pos[Y]--;
 5b2:	e0 e0       	ldi	r30, 0x00	; 0
 5b4:	f1 e0       	ldi	r31, 0x01	; 1
 5b6:	82 81       	ldd	r24, Z+2	; 0x02
 5b8:	93 81       	ldd	r25, Z+3	; 0x03
 5ba:	01 97       	sbiw	r24, 0x01	; 1
 5bc:	93 83       	std	Z+3, r25	; 0x03
 5be:	82 83       	std	Z+2, r24	; 0x02
        checkSnake();
 5c0:	0e 94 d7 01 	call	0x3ae	; 0x3ae <checkSnake>
 5c4:	08 95       	ret

Disassembly of section .text.moveDown:

000005c6 <moveDown>:
    }
}

void moveDown(type movementType)
{
    if (snake[0].pos[Y] == 8)
 5c6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 5ca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 5ce:	28 30       	cpi	r18, 0x08	; 8
 5d0:	31 05       	cpc	r19, r1
 5d2:	19 f4       	brne	.+6      	; 0x5da <moveDown+0x14>
    {
        gameOver();
 5d4:	0e 94 9e 02 	call	0x53c	; 0x53c <gameOver>
 5d8:	08 95       	ret
    } else
    {
        advanceSnake(movementType);
 5da:	0e 94 50 01 	call	0x2a0	; 0x2a0 <advanceSnake>
        snake[0].pos[Y]++;
 5de:	e0 e0       	ldi	r30, 0x00	; 0
 5e0:	f1 e0       	ldi	r31, 0x01	; 1
 5e2:	82 81       	ldd	r24, Z+2	; 0x02
 5e4:	93 81       	ldd	r25, Z+3	; 0x03
 5e6:	01 96       	adiw	r24, 0x01	; 1
 5e8:	93 83       	std	Z+3, r25	; 0x03
 5ea:	82 83       	std	Z+2, r24	; 0x02
        checkSnake();
 5ec:	0e 94 d7 01 	call	0x3ae	; 0x3ae <checkSnake>
 5f0:	08 95       	ret

Disassembly of section .text.moveLeft:

000005f2 <moveLeft>:
    }
}

void moveLeft(type movementType)
{
    if (snake[0].pos[X] == 1)
 5f2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 5fa:	21 30       	cpi	r18, 0x01	; 1
 5fc:	31 05       	cpc	r19, r1
 5fe:	19 f4       	brne	.+6      	; 0x606 <moveLeft+0x14>
    {
        gameOver();
 600:	0e 94 9e 02 	call	0x53c	; 0x53c <gameOver>
 604:	08 95       	ret
    } else
    {
        advanceSnake(movementType);
 606:	0e 94 50 01 	call	0x2a0	; 0x2a0 <advanceSnake>
        snake[0].pos[X]--;
 60a:	e0 e0       	ldi	r30, 0x00	; 0
 60c:	f1 e0       	ldi	r31, 0x01	; 1
 60e:	80 81       	ld	r24, Z
 610:	91 81       	ldd	r25, Z+1	; 0x01
 612:	01 97       	sbiw	r24, 0x01	; 1
 614:	91 83       	std	Z+1, r25	; 0x01
 616:	80 83       	st	Z, r24
        checkSnake();
 618:	0e 94 d7 01 	call	0x3ae	; 0x3ae <checkSnake>
 61c:	08 95       	ret

Disassembly of section .text.moveRight:

0000061e <moveRight>:
    }
}

void moveRight(type movementType)
{
    if (snake[0].pos[X] == 8)
 61e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 622:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 626:	28 30       	cpi	r18, 0x08	; 8
 628:	31 05       	cpc	r19, r1
 62a:	19 f4       	brne	.+6      	; 0x632 <moveRight+0x14>
    {
        gameOver();
 62c:	0e 94 9e 02 	call	0x53c	; 0x53c <gameOver>
 630:	08 95       	ret
    } else
    {
        advanceSnake(movementType);
 632:	0e 94 50 01 	call	0x2a0	; 0x2a0 <advanceSnake>
        snake[0].pos[X]++;
 636:	e0 e0       	ldi	r30, 0x00	; 0
 638:	f1 e0       	ldi	r31, 0x01	; 1
 63a:	80 81       	ld	r24, Z
 63c:	91 81       	ldd	r25, Z+1	; 0x01
 63e:	01 96       	adiw	r24, 0x01	; 1
 640:	91 83       	std	Z+1, r25	; 0x01
 642:	80 83       	st	Z, r24
        checkSnake();
 644:	0e 94 d7 01 	call	0x3ae	; 0x3ae <checkSnake>
 648:	08 95       	ret
