
newMicroControllers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000294  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000050  00000000  00000000  000002c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f74  00000000  00000000  00000313  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000086f  00000000  00000000  00001287  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004af  00000000  00000000  00001af6  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000084  00000000  00000000  00001fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  0000202c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000097  00000000  00000000  000022a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  0000023c  0000023c  00000290  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002380  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.twi_init 0000000c  00000228  00000228  0000027c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.twi_start 00000010  00000218  00000218  0000026c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.twi_stop 00000008  00000234  00000234  00000288  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.twi_tx  00000014  00000204  00000204  00000258  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.wait    0000001e  000001e6  000001e6  0000023a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000102  000000e4  000000e4  00000138  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
   4:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
   8:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
   c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  10:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  14:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  18:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  1c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  20:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  24:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  28:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  2c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  30:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  34:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  38:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  3c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  40:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  44:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  48:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  4c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  50:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  54:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  58:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  5c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  60:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  64:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  68:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  6c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  70:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  74:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  78:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  7c:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  80:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  84:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>
  88:	0c 94 1e 01 	jmp	0x23c	; 0x23c <__bad_interrupt>

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	ec e8       	ldi	r30, 0x8C	; 140
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	40 e0       	ldi	r20, 0x00	; 0
  9e:	19 c0       	rjmp	.+50     	; 0xd2 <__do_clear_bss+0x8>
  a0:	b7 91       	elpm	r27, Z+
  a2:	a7 91       	elpm	r26, Z+
  a4:	37 91       	elpm	r19, Z+
  a6:	27 91       	elpm	r18, Z+
  a8:	07 91       	elpm	r16, Z+
  aa:	07 fd       	sbrc	r16, 7
  ac:	0e c0       	rjmp	.+28     	; 0xca <__do_clear_bss>
  ae:	97 91       	elpm	r25, Z+
  b0:	87 91       	elpm	r24, Z+
  b2:	ef 01       	movw	r28, r30
  b4:	f9 2f       	mov	r31, r25
  b6:	e8 2f       	mov	r30, r24
  b8:	0b bf       	out	0x3b, r16	; 59
  ba:	07 90       	elpm	r0, Z+
  bc:	0d 92       	st	X+, r0
  be:	a2 17       	cp	r26, r18
  c0:	b3 07       	cpc	r27, r19
  c2:	d9 f7       	brne	.-10     	; 0xba <__do_copy_data+0x22>
  c4:	fe 01       	movw	r30, r28
  c6:	1b be       	out	0x3b, r1	; 59
  c8:	04 c0       	rjmp	.+8      	; 0xd2 <__do_clear_bss+0x8>

000000ca <__do_clear_bss>:
  ca:	1d 92       	st	X+, r1
  cc:	a2 17       	cp	r26, r18
  ce:	b3 07       	cpc	r27, r19
  d0:	e1 f7       	brne	.-8      	; 0xca <__do_clear_bss>
  d2:	ec 38       	cpi	r30, 0x8C	; 140
  d4:	f4 07       	cpc	r31, r20
  d6:	21 f7       	brne	.-56     	; 0xa0 <__do_copy_data+0x8>
  d8:	0e 94 72 00 	call	0xe4	; 0xe4 <_etext>
  dc:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>

Disassembly of section .text:

0000023c <__bad_interrupt>:
 23c:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.twi_init:

00000228 <twi_init>:
#include <avr/io.h>
#include <util/delay.h>
#include "snakeLogic.h"

void twi_init(void){
	TWSR = 0;
 228:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 32;	 // TWI clock set to 100kHz, prescaler = 0
 22c:	80 e2       	ldi	r24, 0x20	; 32
 22e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 232:	08 95       	ret

Disassembly of section .text.twi_start:

00000218 <twi_start>:
}

void twi_start(void){
	TWCR = (0x80 | 0x20 | 0x04);
 218:	84 ea       	ldi	r24, 0xA4	; 164
 21a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0x00 == (TWCR & 0x80) );
 21e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 222:	88 23       	and	r24, r24
 224:	e4 f7       	brge	.-8      	; 0x21e <twi_start+0x6>
}
 226:	08 95       	ret

Disassembly of section .text.twi_stop:

00000234 <twi_stop>:

void twi_stop(void){
	TWCR = (0x80 | 0x10 | 0x04);
 234:	84 e9       	ldi	r24, 0x94	; 148
 236:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 23a:	08 95       	ret

Disassembly of section .text.twi_tx:

00000204 <twi_tx>:
}

void twi_tx(unsigned char data){
	TWDR = data;
 204:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	TWCR = (0x80 | 0x04);
 208:	84 e8       	ldi	r24, 0x84	; 132
 20a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while( 0 == (TWCR & 0x80) );
 20e:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 212:	88 23       	and	r24, r24
 214:	e4 f7       	brge	.-8      	; 0x20e <twi_tx+0xa>
}
 216:	08 95       	ret

Disassembly of section .text.wait:

000001e6 <wait>:

void wait( int ms ){
	for (int i=0; i<ms; i++)
 1e6:	20 e0       	ldi	r18, 0x00	; 0
 1e8:	30 e0       	ldi	r19, 0x00	; 0
 1ea:	08 c0       	rjmp	.+16     	; 0x1fc <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ec:	ef ec       	ldi	r30, 0xCF	; 207
 1ee:	f7 e0       	ldi	r31, 0x07	; 7
 1f0:	31 97       	sbiw	r30, 0x01	; 1
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <wait+0xa>
 1f4:	00 c0       	rjmp	.+0      	; 0x1f6 <wait+0x10>
 1f6:	00 00       	nop
 1f8:	2f 5f       	subi	r18, 0xFF	; 255
 1fa:	3f 4f       	sbci	r19, 0xFF	; 255
 1fc:	28 17       	cp	r18, r24
 1fe:	39 07       	cpc	r19, r25
 200:	ac f3       	brlt	.-22     	; 0x1ec <wait+0x6>
	{
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 202:	08 95       	ret

Disassembly of section .text.main:

000000e4 <main>:
		
}

int main( void ){
	
	twi_init();		// Init TWI interface
  e4:	0e 94 14 01 	call	0x228	; 0x228 <twi_init>
	//initSnake();
	//clearlampje();
	
	twi_start();
  e8:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
	twi_tx(0xE0);	// Display I2C addres + R/W bit
  ec:	80 ee       	ldi	r24, 0xE0	; 224
  ee:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_tx(0x21);	// Internal osc on (page 10 HT16K33)
  f2:	81 e2       	ldi	r24, 0x21	; 33
  f4:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_stop();
  f8:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>

	twi_start();
  fc:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 100:	80 ee       	ldi	r24, 0xE0	; 224
 102:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_tx(0xA0);	// HT16K33 pins all output
 106:	80 ea       	ldi	r24, 0xA0	; 160
 108:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_stop();
 10c:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>

	twi_start();
 110:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 114:	80 ee       	ldi	r24, 0xE0	; 224
 116:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_tx(0xE3);	// Display Dimming 4/16 duty cycle
 11a:	83 ee       	ldi	r24, 0xE3	; 227
 11c:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_stop();
 120:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>

	twi_start();
 124:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
	twi_tx(0xE0);	// Display I2C address + R/W bit
 128:	80 ee       	ldi	r24, 0xE0	; 224
 12a:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_tx(0x81);	// Display OFF - Blink On
 12e:	81 e8       	ldi	r24, 0x81	; 129
 130:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
	twi_stop();
 134:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>
		twi_stop();
	}	
	*/

	
		twi_start();
 138:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 13c:	80 ee       	ldi	r24, 0xE0	; 224
 13e:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x02);	// rij
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x00);	// kolumn
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_stop();
 14e:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>
		
		twi_start();
 152:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 156:	80 ee       	ldi	r24, 0xE0	; 224
 158:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x04);	// rij
 15c:	84 e0       	ldi	r24, 0x04	; 4
 15e:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x00);	// kolumn
 162:	80 e0       	ldi	r24, 0x00	; 0
 164:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_stop();
 168:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>
		
		twi_start();
 16c:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit		
 170:	80 ee       	ldi	r24, 0xE0	; 224
 172:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x06);	// rij
 176:	86 e0       	ldi	r24, 0x06	; 6
 178:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x00);	// kolumn
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_stop();
 182:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>
		
		twi_start();
 186:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 18a:	80 ee       	ldi	r24, 0xE0	; 224
 18c:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x08);	// rij
 190:	88 e0       	ldi	r24, 0x08	; 8
 192:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x00);	// kolumn
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_stop();
 19c:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>


	while (1)
	{
		twi_start();
 1a0:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 1a4:	80 ee       	ldi	r24, 0xE0	; 224
 1a6:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x04);	// Address
 1aa:	84 e0       	ldi	r24, 0x04	; 4
 1ac:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x00);	// data
 1b0:	80 e0       	ldi	r24, 0x00	; 0
 1b2:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_stop();
 1b6:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>

		wait(500);	
 1ba:	84 ef       	ldi	r24, 0xF4	; 244
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <wait>

		twi_start();
 1c2:	0e 94 0c 01 	call	0x218	; 0x218 <twi_start>
		twi_tx(0xE0);	// Display I2C addres + R/W bit
 1c6:	80 ee       	ldi	r24, 0xE0	; 224
 1c8:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x04);	// Address RIJ
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_tx(0x08);	// data  KOLUMN
 1d2:	88 e0       	ldi	r24, 0x08	; 8
 1d4:	0e 94 02 01 	call	0x204	; 0x204 <twi_tx>
		twi_stop();	
 1d8:	0e 94 1a 01 	call	0x234	; 0x234 <twi_stop>

		wait(500);
 1dc:	84 ef       	ldi	r24, 0xF4	; 244
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <wait>
 1e4:	dd cf       	rjmp	.-70     	; 0x1a0 <main+0xbc>
