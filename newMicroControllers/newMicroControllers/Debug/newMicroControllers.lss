
newMicroControllers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000242  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000242  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000038  00000000  00000000  00000271  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000b68  00000000  00000000  000002a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000843  00000000  00000000  00000e11  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002e8  00000000  00000000  00001654  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  0000007c  00000000  00000000  0000193c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000027d  00000000  00000000  000019b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000fc  00000000  00000000  00001c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  00001d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000001ca  000001ca  0000023e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.wait    0000001e  000001ac  000001ac  00000220  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.__vector_2 0000004e  0000013c  0000013c  000001b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.__vector_3 00000052  000000ea  000000ea  0000015e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    00000022  0000018a  0000018a  000001fe  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .bss.ledIndex 00000002  00800100  00800100  00000242  2**0
                  ALLOC

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
   8:	0c 94 9e 00 	jmp	0x13c	; 0x13c <__vector_2>
   c:	0c 94 75 00 	jmp	0xea	; 0xea <_etext>
  10:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  14:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  18:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  1c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  20:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  24:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  28:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  2c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  30:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  34:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  38:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  3c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  40:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  44:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  48:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  4c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  50:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  54:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  58:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  5c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  60:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  64:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  68:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  6c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  70:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  74:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  78:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  7c:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  80:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  84:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>
  88:	0c 94 e5 00 	jmp	0x1ca	; 0x1ca <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001ca <__bad_interrupt>:
 1ca:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.wait:

000001ac <wait>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	08 c0       	rjmp	.+16     	; 0x1c2 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	ef ec       	ldi	r30, 0xCF	; 207
 1b4:	f7 e0       	ldi	r31, 0x07	; 7
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <wait+0xa>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <wait+0x10>
 1bc:	00 00       	nop
 1be:	2f 5f       	subi	r18, 0xFF	; 255
 1c0:	3f 4f       	sbci	r19, 0xFF	; 255
 1c2:	28 17       	cp	r18, r24
 1c4:	39 07       	cpc	r19, r25
 1c6:	ac f3       	brlt	.-22     	; 0x1b2 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 1c8:	08 95       	ret

Disassembly of section .text.__vector_2:

0000013c <__vector_2>:

int ledIndex = 0;

ISR( INT1_vect ) {	
 13c:	1f 92       	push	r1
 13e:	0f 92       	push	r0
 140:	0f b6       	in	r0, 0x3f	; 63
 142:	0f 92       	push	r0
 144:	11 24       	eor	r1, r1
 146:	8f 93       	push	r24
 148:	9f 93       	push	r25
	ledIndex++;
 14a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 158:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if (ledIndex > 7){
 15c:	08 97       	sbiw	r24, 0x08	; 8
 15e:	24 f0       	brlt	.+8      	; 0x168 <__vector_2+0x2c>
		ledIndex = 0;
 160:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 164:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
    PORTB = (1<<ledIndex);	
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 170:	02 c0       	rjmp	.+4      	; 0x176 <__vector_2+0x3a>
 172:	88 0f       	add	r24, r24
 174:	99 1f       	adc	r25, r25
 176:	0a 94       	dec	r0
 178:	e2 f7       	brpl	.-8      	; 0x172 <__vector_2+0x36>
 17a:	88 bb       	out	0x18, r24	; 24
}
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

Disassembly of section .text.__vector_3:

000000ea <__vector_3>:


ISR( INT2_vect ) {
  ea:	1f 92       	push	r1
  ec:	0f 92       	push	r0
  ee:	0f b6       	in	r0, 0x3f	; 63
  f0:	0f 92       	push	r0
  f2:	11 24       	eor	r1, r1
  f4:	8f 93       	push	r24
  f6:	9f 93       	push	r25
	ledIndex--;
  f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 106:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	
	if (ledIndex < 0) {
 10a:	99 23       	and	r25, r25
 10c:	34 f4       	brge	.+12     	; 0x11a <__vector_3+0x30>
		ledIndex = 7;
 10e:	87 e0       	ldi	r24, 0x07	; 7
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 116:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}

    PORTB = (1<<ledIndex);		
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	00 90 00 01 	lds	r0, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 122:	02 c0       	rjmp	.+4      	; 0x128 <__vector_3+0x3e>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	0a 94       	dec	r0
 12a:	e2 f7       	brpl	.-8      	; 0x124 <__vector_3+0x3a>
 12c:	88 bb       	out	0x18, r24	; 24
}
 12e:	9f 91       	pop	r25
 130:	8f 91       	pop	r24
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

Disassembly of section .text.main:

0000018a <main>:



int main( void ) {
	// Init I/O
	DDRD = 0x00;			// PORTD(7:4) output, PORTD(3:0) input	
 18a:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF;
 18c:	8f ef       	ldi	r24, 0xFF	; 255
 18e:	87 bb       	out	0x17, r24	; 23
	//PORTB = 0x01;

	// Init Interrupt hardware
	EICRA |= 0b00111100;			
 190:	ea e6       	ldi	r30, 0x6A	; 106
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	80 81       	ld	r24, Z
 196:	8c 63       	ori	r24, 0x3C	; 60
 198:	80 83       	st	Z, r24
	EIMSK |= 0b00000110;			
 19a:	89 b7       	in	r24, 0x39	; 57
 19c:	86 60       	ori	r24, 0x06	; 6
 19e:	89 bf       	out	0x39, r24	; 57
	
	sei();				
 1a0:	78 94       	sei

	while (1) {		
		wait( 500 );								
 1a2:	84 ef       	ldi	r24, 0xF4	; 244
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 d6 00 	call	0x1ac	; 0x1ac <wait>
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <main+0x18>
