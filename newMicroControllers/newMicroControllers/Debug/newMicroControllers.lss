
newMicroControllers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000258  2**0
                  ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000258  2**0
                  ALLOC
  3 .comment      0000002f  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000287  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bfb  00000000  00000000  000002c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000864  00000000  00000000  00000ec2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  00001726  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000064  00000000  00000000  00001a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000027d  00000000  00000000  00001a84  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b3  00000000  00000000  00001d01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000004  000001c0  000001c0  00000254  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001de4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.wait    0000001e  00000160  00000160  000001f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.display 00000024  0000013c  0000013c  000001d0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.digitDOWN 0000001c  0000017e  0000017e  00000212  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.digitUP 00000018  0000019a  0000019a  0000022e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.main    00000042  000000fa  000000fa  0000018e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .progmemx.data.Numbers 0000000f  000000ea  000000ea  0000017e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 20 .text.libgcc  0000000e  000001b2  000001b2  00000246  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
   4:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
   8:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
   c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  10:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  14:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  18:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  1c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  20:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  24:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  28:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  30:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  34:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  38:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  3c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  40:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  44:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  48:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  4c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  50:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  54:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  58:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  5c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  60:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  64:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  68:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  6c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  70:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  74:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  78:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  7c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  80:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  84:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>
  88:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__bad_interrupt>

0000008c <.dinit>:
  8c:	01 00       	.word	0x0001	; ????
  8e:	01 02       	muls	r16, r17
  90:	80 00       	.word	0x0080	; ????

00000092 <__ctors_end>:
  92:	11 24       	eor	r1, r1
  94:	1f be       	out	0x3f, r1	; 63
  96:	cf ef       	ldi	r28, 0xFF	; 255
  98:	d0 e1       	ldi	r29, 0x10	; 16
  9a:	de bf       	out	0x3e, r29	; 62
  9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
  9e:	ec e8       	ldi	r30, 0x8C	; 140
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	40 e0       	ldi	r20, 0x00	; 0
  a4:	19 c0       	rjmp	.+50     	; 0xd8 <__do_clear_bss+0x8>
  a6:	b7 91       	elpm	r27, Z+
  a8:	a7 91       	elpm	r26, Z+
  aa:	37 91       	elpm	r19, Z+
  ac:	27 91       	elpm	r18, Z+
  ae:	07 91       	elpm	r16, Z+
  b0:	07 fd       	sbrc	r16, 7
  b2:	0e c0       	rjmp	.+28     	; 0xd0 <__do_clear_bss>
  b4:	97 91       	elpm	r25, Z+
  b6:	87 91       	elpm	r24, Z+
  b8:	ef 01       	movw	r28, r30
  ba:	f9 2f       	mov	r31, r25
  bc:	e8 2f       	mov	r30, r24
  be:	0b bf       	out	0x3b, r16	; 59
  c0:	07 90       	elpm	r0, Z+
  c2:	0d 92       	st	X+, r0
  c4:	a2 17       	cp	r26, r18
  c6:	b3 07       	cpc	r27, r19
  c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x22>
  ca:	fe 01       	movw	r30, r28
  cc:	1b be       	out	0x3b, r1	; 59
  ce:	04 c0       	rjmp	.+8      	; 0xd8 <__do_clear_bss+0x8>

000000d0 <__do_clear_bss>:
  d0:	1d 92       	st	X+, r1
  d2:	a2 17       	cp	r26, r18
  d4:	b3 07       	cpc	r27, r19
  d6:	e1 f7       	brne	.-8      	; 0xd0 <__do_clear_bss>
  d8:	e1 39       	cpi	r30, 0x91	; 145
  da:	f4 07       	cpc	r31, r20
  dc:	21 f7       	brne	.-56     	; 0xa6 <__do_copy_data+0x8>
  de:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  e2:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

Disassembly of section .text:

000001c0 <__bad_interrupt>:
 1c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

Disassembly of section .text.wait:

00000160 <wait>:
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>

void wait( int ms ) {
	for (int i=0; i<ms; i++) {
 160:	20 e0       	ldi	r18, 0x00	; 0
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	08 c0       	rjmp	.+16     	; 0x176 <wait+0x16>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 166:	ef ec       	ldi	r30, 0xCF	; 207
 168:	f7 e0       	ldi	r31, 0x07	; 7
 16a:	31 97       	sbiw	r30, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <wait+0xa>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <wait+0x10>
 170:	00 00       	nop
 172:	2f 5f       	subi	r18, 0xFF	; 255
 174:	3f 4f       	sbci	r19, 0xFF	; 255
 176:	28 17       	cp	r18, r24
 178:	39 07       	cpc	r19, r25
 17a:	ac f3       	brlt	.-22     	; 0x166 <wait+0x6>
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}
 17c:	08 95       	ret

Disassembly of section .text.display:

0000013c <display>:
};

int chosenNumber;

void display(int digit){
	if(digit >= 0 && digit <= 15){						
 13c:	80 31       	cpi	r24, 0x10	; 16
 13e:	91 05       	cpc	r25, r1
 140:	60 f4       	brcc	.+24     	; 0x15a <display+0x1e>
		PORTD = Numbers[digit];							
 142:	09 2e       	mov	r0, r25
 144:	00 0c       	add	r0, r0
 146:	aa 0b       	sbc	r26, r26
 148:	86 51       	subi	r24, 0x16	; 22
 14a:	9f 4f       	sbci	r25, 0xFF	; 255
 14c:	af 4f       	sbci	r26, 0xFF	; 255
 14e:	fc 01       	movw	r30, r24
 150:	5a 2f       	mov	r21, r26
 152:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <__xload_1>
 156:	62 bb       	out	0x12, r22	; 18
 158:	08 95       	ret
	} else{
		PORTD = Numbers[14];
 15a:	89 e7       	ldi	r24, 0x79	; 121
 15c:	82 bb       	out	0x12, r24	; 18
 15e:	08 95       	ret

Disassembly of section .text.digitDOWN:

0000017e <digitDOWN>:
	}	
}


void digitDOWN(){		
	display(chosenNumber--);
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 186:	9c 01       	movw	r18, r24
 188:	21 50       	subi	r18, 0x01	; 1
 18a:	31 09       	sbc	r19, r1
 18c:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <_edata+0x1>
 190:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
 194:	0e 94 9e 00 	call	0x13c	; 0x13c <display>
 198:	08 95       	ret

Disassembly of section .text.digitUP:

0000019a <digitUP>:
}

void digitUP(){
	chosenNumber++;
 19a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 19e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1a2:	01 96       	adiw	r24, 0x01	; 1
 1a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 1a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	display(chosenNumber);
 1ac:	0e 94 9e 00 	call	0x13c	; 0x13c <display>
 1b0:	08 95       	ret

Disassembly of section .text.main:

000000fa <main>:
} 


int main( void ) {
	// Init I/O
	DDRD = 0xFF;			//These are for the input buttons
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x00;		
  fe:	12 ba       	out	0x12, r1	; 18
	PORTB = 0x01;
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	88 bb       	out	0x18, r24	; 24

	sei();				
 104:	78 94       	sei

	chosenNumber = 4;
 106:	84 e0       	ldi	r24, 0x04	; 4
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 10e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	
	while (1) {		
		wait( 200 );	
 112:	88 ec       	ldi	r24, 0xC8	; 200
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	0e 94 b0 00 	call	0x160	; 0x160 <wait>
		display(chosenNumber);	
 11a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 11e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 122:	0e 94 9e 00 	call	0x13c	; 0x13c <display>
		
		
		if (PINB == 0b00000001) {
 126:	86 b3       	in	r24, 0x16	; 22
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	11 f4       	brne	.+4      	; 0x130 <main+0x36>
			digitUP();
 12c:	0e 94 cd 00 	call	0x19a	; 0x19a <digitUP>
		}
		
		if (PINB == 0b00000010) {
 130:	86 b3       	in	r24, 0x16	; 22
 132:	82 30       	cpi	r24, 0x02	; 2
 134:	71 f7       	brne	.-36     	; 0x112 <main+0x18>
			digitDOWN();
 136:	0e 94 bf 00 	call	0x17e	; 0x17e <digitDOWN>
 13a:	eb cf       	rjmp	.-42     	; 0x112 <main+0x18>

Disassembly of section .text.libgcc:

000001b2 <__xload_1>:
 1b2:	57 fd       	sbrc	r21, 7
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <__xload_1+0xa>
 1b6:	5b bf       	out	0x3b, r21	; 59
 1b8:	67 91       	elpm	r22, Z+
 1ba:	08 95       	ret
 1bc:	60 81       	ld	r22, Z
 1be:	08 95       	ret
